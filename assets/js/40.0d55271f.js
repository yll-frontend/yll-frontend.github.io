(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{364:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"变量、作用域、内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量、作用域、内存"}},[t._v("#")]),t._v(" 变量、作用域、内存")]),t._v(" "),s("h2",{attrs:{id:"确定类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#确定类型"}},[t._v("#")]),t._v(" 确定类型")]),t._v(" "),s("p",[s("code",[t._v("typeof")]),t._v("操作符适合用来判断一个变量是否为原始类型\n"),s("code",[t._v("instanceOf")]),t._v("操作符用来确定引用值的类型")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[s("code",[t._v("typeof")]),t._v("在检测函数时也会返回"),s("code",[t._v("function")])])]),t._v(" "),s("h2",{attrs:{id:"执行上下文与作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文与作用域"}},[t._v("#")]),t._v(" 执行上下文与作用域")]),t._v(" "),s("p",[t._v("变量或函数的上下文决定了他们可以访问到那些数据，以及他们的行为。每个"),s("strong",[t._v("上下文")]),t._v("都有一个关联的"),s("strong",[t._v("变量对象")]),t._v("，这个上下文中定义的所有变量以及函数都存于这个对象上。")]),t._v(" "),s("ul",[s("li",[t._v("全局上下文是最外层的上下文，在浏览器中就是我们所说的window对象，但是"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("const")]),t._v("的顶级声明不会定义在全局上下文中。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("全局上下文只有在关闭网页或退出浏览器才会被销毁")])]),t._v(" "),s("ul",[s("li",[t._v("上下文在执行的时候会创建一个变量对象的"),s("strong",[t._v("作用域链")]),t._v("，这个作用域链决定了各个上下文的代码在访问变量和函数时的顺序。如果上下文是一个函数，则其"),s("strong",[t._v("活动对象")]),t._v("用作变量对象，活动对象最初只有一个定义变量:"),s("code",[t._v("arguments")]),t._v(".(全局上下文中没有这个变量)")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("函数参数被默认为是当前上下文中的变量，因此也跟上下文中的其他变量以遵循相同的访问规则")])]),t._v(" "),s("h2",{attrs:{id:"作用域链增强"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链增强"}},[t._v("#")]),t._v(" 作用域链增强")]),t._v(" "),s("p",[t._v("执行上下文主要由去全局上下文和函数上下文两种，担忧其他方式来增强作用域链。某些语句会导致在作用于连的最前端临时添加一个上下文，这个上下文在代码执行后会被删除。通常会在两种情况下会出现这个现象：")]),t._v(" "),s("ul",[s("li",[s("blockquote",[s("p",[t._v("try/catch语句的catch块")])])]),t._v(" "),s("li",[s("blockquote",[s("p",[t._v("with语句")])])])]),t._v(" "),s("h2",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("h3",{attrs:{id:"标记清理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记清理"}},[t._v("#")]),t._v(" 标记清理")]),t._v(" "),s("p",[t._v("JavaScript最常用的垃圾回收策略是"),s("strong",[t._v("引用计数")]),t._v("。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于山下文中的标记，当变量离开上下文也会被加上离开上下文的标记。\n给变量添加标记的方法有很多种。比如，当变量进入上下文时反转某一位;或者可以维护“在上下文”和“不在上下文”两个变量列表，可以把变量从一个列表转移到另一个列表等。\n垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后将所有在上下文中的变量以及上下文中的变量引用的变量的标记清除。对吼做一次内存清理，销毁所有带有标记的变量，并且回收他们的内存。")]),t._v(" "),s("h3",{attrs:{id:"引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),s("p",[t._v("思路是对每个值记录它被引用的次数，当引用次数为0时，垃圾回收程序下次运行会释放这个变量的内存。但是存在一个"),s("strong",[t._v("循环引用")]),t._v("的问题:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("problem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" objectA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" objectB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           \n  objectA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someOtherObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objectB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  objectB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("anotherObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objectA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在这个例子中，objectA和objectB通过各自的属性相互引用，意味着他们的引用数都是2，在引用计数的策略下，他们在函数结束后还会存在。")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),s("p",[t._v("在IE中，"),s("code",[t._v("window.CollectionGarbage()")]),t._v("会立即粗发垃圾回收，在Opera以及更高版本中，"),s("code",[t._v("window.opera.collect()")]),t._v("也会触发垃圾回收程序，但是并不推荐主动触发垃圾回收")])]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("ul",[s("li",[t._v("原始值大小固定，保存在栈上")]),t._v(" "),s("li",[t._v("引用值是对象，保存在堆内存上")]),t._v(" "),s("li",[t._v("从一个变量到另一个变量复制值，只会复制指针，因此结果是两个变量指向同一个对象")]),t._v(" "),s("li",[t._v("执行上下文分为全局上下文、函数上下文以及块级上下文")]),t._v(" "),s("li",[t._v("代码执行流没进入一个新上下文，都会创建一个作用链，用于搜索变量和函数")]),t._v(" "),s("li",[t._v("函数和块的局部上下文不仅可以访问自己的作用域内的变量，也可以访问任何包含上下文以及全局上下文的变量")])])])}),[],!1,null,null,null);s.default=n.exports}}]);