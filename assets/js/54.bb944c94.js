(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{378:function(t,s,a){"use strict";a.r(s);var _=a(4),v=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("作为一名前端开发我们需要将产品与UI所设计的文本转变成网页上展示给用户的文字，在这个过程中我有时会碰到一些显示上的问题，比如明明设置了不同的font-weight,在浏览器上的显示效果却没有任何区别. 在这篇文章中，我会把开发中的一些困惑以及查到的关于字体相关的知识做个小结")]),t._v(" "),s("h3",{attrs:{id:"_1-字体的回退-fallback-机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-字体的回退-fallback-机制"}},[t._v("#")]),t._v(" 1.字体的回退（fallback）机制")]),t._v(" "),s("p",[t._v("在 css 中，我们可以通过 font-family 指定不同的字体，并且可以给定一个先后顺序。当指定的的字体找不到的时候，浏览器会按照 font-family 属性指定的先后顺序寻找支持的字体。比如：")]),t._v(" "),s("div",{staticClass:"language-css line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-family")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PingFang SC'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sans-serif"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("上述css代码制定了PingFang SC和 sans-serif 两种字体，在支持PingFang SC字体的浏览器会显示这个字体，在不支持这个字体的平台上会使用sans-serif字体，若两种字体均不支持，则用浏览器的默认字体代替。")]),t._v(" "),s("h3",{attrs:{id:"_2-安全字体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-安全字体"}},[t._v("#")]),t._v(" 2.安全字体")]),t._v(" "),s("p",[t._v("网页安全字体是指通常可以应用到所有系统而不会产生问题的某几个字体")]),t._v(" "),s("p",[t._v("CSS 定义了 5 个常用的字体名称: serif, sans-serif, monospace, cursive,和 fantasy.  这些都是非常通用的，当使用这些通用名称时，使用的字体完全取决于每个浏览器，而且它们所运行的每个操作系统也会有所不同. 这是一种糟糕的情况，浏览器会尽力提供一个看上去合适的字体。 serif, sans-serif 和 monospace 是比较好预测的，默认的情况应该比较合理，另一方面，cursive 和 fantasy 是不太好预测的，我们建议使用它们的时候应该稍微注意一些，多多测试 ---MDN")]),t._v(" "),s("h3",{attrs:{id:"_3-字重的回退机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-字重的回退机制"}},[t._v("#")]),t._v(" 3.字重的回退机制")]),t._v(" "),s("p",[t._v("在 CSS 中，可以通过 font-weight 属性指定了字体的粗细程度。其属性值既可以用 normal，bold 等粗细值名称表示，也可以用介于 1-1000 之间的数值表示，非 100 的整数倍的数值将被四舍五入转换为 100 的倍数。一些常见的数值和名称的对应关系如下")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("数值")]),t._v(" "),s("th",[t._v("粗细值名称")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("100")]),t._v(" "),s("td",[t._v("Thin (Hairline)")])]),t._v(" "),s("tr",[s("td",[t._v("200")]),t._v(" "),s("td",[t._v("Extra Light (Ultra Light)")])]),t._v(" "),s("tr",[s("td",[t._v("300")]),t._v(" "),s("td",[t._v("Light")])]),t._v(" "),s("tr",[s("td",[t._v("400")]),t._v(" "),s("td",[t._v("Normal")])]),t._v(" "),s("tr",[s("td",[t._v("500")]),t._v(" "),s("td",[t._v("Medium")])]),t._v(" "),s("tr",[s("td",[t._v("600")]),t._v(" "),s("td",[t._v("SemiBold (Demi Bold)")])]),t._v(" "),s("tr",[s("td",[t._v("700")]),t._v(" "),s("td",[t._v("Bold")])]),t._v(" "),s("tr",[s("td",[t._v("800")]),t._v(" "),s("td",[t._v("Extra Bold (Ultra Bold)")])]),t._v(" "),s("tr",[s("td",[t._v("900")]),t._v(" "),s("td",[t._v("Black (Heavy)")])])])]),t._v(" "),s("p",[t._v("不同字体族/字体支持的字重不同，如果指定的权重值不可用，浏览器会依赖字重的回退机制去解决问题。因此若将某个字体的字号设为600，然而所使用的字体不支持600的自重，则浏览器会先自动升序然后降序匹配，得到和匹配到的字重相同的显示效果")]),t._v(" "),s("p",[t._v("如果指定的权重值在 400和 500之间（包括400和500）：按升序查找指定值与500之间的可用权重;如果未找到匹配项，按降序查找小于指定值的可用权重；如果未找到匹配项，按升序查找大于500的可用权重。如果指定值小于400按降序查找小于指定值的可用权重。如果未找到匹配项，按升序查找大于指定值的可用权重（先尽可能的小，再尽可能的大）。如果指定值大于500，按升序查找大于指定值的可用权重。如果未找到匹配项，按降序查找小于指定值的可用权重（先尽可能的大，再尽可能的小）。")]),t._v(" "),s("h3",{attrs:{id:"_4-等宽字体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-等宽字体"}},[t._v("#")]),t._v(" 4.等宽字体")]),t._v(" "),s("p",[t._v("有的时候视觉稿会要求前端在表格数据的后面加一个符号，这个时候由于在大多数字体中每个数字占的体积并不相同，会导致在同一列的图标无法对齐（如上图所示），影响视觉效果。这个时候，可以通过等宽字体（如'Helvetica Neue’）来解决这个问题，当包裹字符的代码块的font-family被设置成等宽字体时，每个数字会占用同样的空间，这样可以保证一致的显示效果，不会出现参差不齐的现象")])])}),[],!1,null,null,null);s.default=v.exports}}]);