(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{376:function(t,h,s){"use strict";s.r(h);var a=s(4),v=Object(a.a)({},(function(){var t=this,h=t._self._c;return h("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[h("h1",{attrs:{id:"spa路由"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#spa路由"}},[t._v("#")]),t._v(" SPA路由")]),t._v(" "),h("h2",{attrs:{id:"hash"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" "),h("strong",[t._v("hash")])]),t._v(" "),h("p",[t._v("前端路由实现原理简介：本质上就是检测 URL 的变化，截获 URL 地址，通过解析、匹配路由规则实现 UI 更新。")]),t._v(" "),h("p",[t._v("页面 URL 变化但是页面不刷新原理:")]),t._v(" "),h("blockquote",[h("p",[t._v("页面的 url 是由"),h("strong",[t._v("协议+域名+端口号+虚拟目录+文件名+锚")]),t._v("组成的，hash 值就是页面的锚部分，hash 也称作锚点，是用来做页面定位的，与 hash 值对应的 DOM id 显示在可视区内。当改变 hash 值时。可以通过监听 hash 值的变化来实现前端路由：监听 hash 值的变化，不会触发页面刷新，监听 hashChange，触发相应的回调，通过 matcher 函数截取 url，通过路由规则进行相应的匹配，进行 Vritural Dom 替换操作（differ 算法）")])]),t._v(" "),h("p",[t._v("hash 值变化的特点：")]),t._v(" "),h("ul",[h("li",[t._v("因为"),h("strong",[t._v("http 请求不包含 hash 值")]),t._v("，所以 hash 值改变时不会发送请求")]),t._v(" "),h("li",[t._v("hash 值改变会向页面的 pageStack 压入或者去除内容（即改变的浏览器历史记录）")]),t._v(" "),h("li",[t._v("****hash 值改变会触发 window.onHashChange()****事件")])]),t._v(" "),h("h2",{attrs:{id:"history"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" "),h("strong",[t._v("history")])]),t._v(" "),h("p",[t._v("浏览器有一个类似页面栈的记录，window 通过 history 提供浏览器访问历史记录的能力。\nhiatory 的特点:")]),t._v(" "),h("ul",[h("li",[h("p",[t._v("history.length\n出于安全考虑，History 对象不允许未授权代码访问历史记录中其它页面的 URLs，但可以通过 history.length 访问历史记录对象的长度。")])]),t._v(" "),h("li",[h("p",[t._v("history.back()\n回退到上一个历史记录，同浏览器后退键")])]),t._v(" "),h("li",[h("p",[t._v("history.forward()\n前进到下一个历史记录，同浏览器前进键")])]),t._v(" "),h("li",[h("p",[t._v("history.go(n)\n跳转到相应的访问记录；若 n > 0，则前进，若 n < 0，则后退，若 n = 0 则刷新当前页面")])]),t._v(" "),h("li",[h("p",[h("code",[t._v("history.pushState()")]),t._v(" 此函数接受三个参数：")]),t._v(" "),h("ul",[h("li",[t._v("state：用于存储该 URL 对应的状态对象，可以通过 history.state 获取")]),t._v(" "),h("li",[t._v("title：标题，目前浏览器并不支持")]),t._v(" "),h("li",[t._v("URL：定义新的历史 URL 记录，需要注意，新的 URL 必须与当前 URL 同源，不能跨域")])]),t._v(" "),h("p",[t._v("此方法会向页面的历史记录中新增一条历史记录，同时不会刷新页面，仅仅会改变页面的 url（"),h("strong",[t._v("单页面路由的实现就是利用了此原理")]),t._v("）")])]),t._v(" "),h("li",[h("p",[t._v("同 hash 模式相比优缺点：")]),t._v(" "),h("ul",[h("li",[t._v("新的 URL 可以是任意同源的 URL，而 window.location，只能通过改变 hash 值才能保证留在当前 document 中，浏览器不发起请求")]),t._v(" "),h("li",[t._v("新的 URL 可以是当前 URL，不改变，就可以创建一条新的历史记录项，而 window.location 必须设置不同的 hash 值，才能创建。假如当前 URL 为 /home.html#foo，使用 window.location 设置 hash 时，hash 值不能是#foo 才能创建历史记录")])])]),t._v(" "),h("li",[h("p",[t._v("history.repalce()\n同 pushState 相同，但是他不会新增历史记录只会改变当前的历史记录")])])])])}),[],!1,null,null,null);h.default=v.exports}}]);